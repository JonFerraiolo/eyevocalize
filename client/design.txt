

startup sequence elements
  email and checksum ls
  clientId ls
  clientId to server
  autologin if necessary
  socket connection
  resolve socket promise
  startupChecks
  call main

server sends email

server does not send email
  startupChecks
  call main
  clientId ls ()
  email and checksum ls
  socket connection
  clientId to server
  resolve socket promise
  autologin if necessary

what about history, etc for multiple emails?
  prefix all localStorage with email prefix
  maintain list of emails in localStorage
  first time with email, migrate trialversion_* to <email>_*

client DB_TABLE_PREFIX
on connection, initialize socket handshake, get clientId (current time)



syncing data

something new spoken
client History.js: update ls, main/sync
  two lists, deletions and additions since last sync, lists of phrases
  deletions are removed from ls immediately, just like now
  in fact, only changes are to add to pending lists all deletions and additions, plus call to main.js sync
client favorites.js:
  only changes are to add lastMod value and call sync after every change
  pending just returns current favorites if date greater than lastSync
client main.js sync(): collect all pending, send all pending to server
client History.js (pending history=all pending)
client main.js, lastSync in ls, getLastSync(), clientId from ls, initiated with timestamp
socket msg: ClientUpdates, {clientId, clientLastSync, updates: {history:{deletions,additions}, favorites, settings, clipboard} }
server clientSync.js:
  select lastSync for all connected clients for this email
  make timestamp which will be the new lastSync ???  Necessary?
  distribute all pending (promises),
  update lastSync client table,
  send custom updates to client, history since this client previous lastSync
server historySync.js:
  mergeAndUpdate(minLastSyncConnected, minLastSyncAll, maxLastSync, updates:{deletions,additions})
  history table delete: delete from table where created in (?), array
  additions: INSERT INTO tbl_name (a,b,c) VALUES ?, array of arrays, where inner are phrases
  return history since minLastSyncConnected
Socket message to all connected clients: ServerUpdates, same values as ClientUpdates, custom updates for each client
  who customizes? Server, but which file? historySync.js
client main.js sync: receive all pending, distribute all pending, update lastSync in ls after everything finishes
client History.js: merge updates from server (ie, do deletions, replace everything after sync timestamp), update ls

is it solid if error or disconnect?
what about clients that go stale

need logic for
  client data change: update ls, add to pending, call main, if connected, send all pending to server
  client (re) connects: send all pending to server
  server gets updated data: merge into db, push updates to all connected clients same user
  server gets new client connection: nothing else needed

server files
clientSync.js
  manages corresponding table and sync apis
  receives and sends socket.io messages from/to clients
historySync.js manages corresponding table and sync & merge logic
  historySync(email, clientId, clients array, updates)
    clients array holds clientId and lastSync
    select all items >= timestamp
    mark all new deletions, insert all additions
    send back clients array, clientId and updates array for that client
    history table needs to keep all deletions after minimum timestamp for all clients for this user
    that means delete all deletions up to minimum timestamp
settingsSync.js manages corresponding table and sync & merge logic
favoritesSync.js manages corresponding table and sync & merge logic
chipboardSync.js manages corresponding table and sync & merge logic

on client, new file sync.js
gets push notifications and distributes
gets update notifications from other files, collects all updates, sends to server
stores clientId and last sync in localStorage
synchronization via socket.io
NewSyncFromClient: contains all updates of any data since last sync
NewSyncFromServer: contains all updates of any data since last sync

each client needs a unique id
each save to local storage or server need needs a timestamp

server merge
if client timestamp > user last sync, then merge
if any updates, push to all active clients
history, clipboard, favorites merge adds all phrases (history: in timestamp order)
take latest list, find items from other list that are missing,
try to place unmatched items based on items before Or after

MySQL
each item in db gets an autoincrement id, which is indicator that server has a copy
add data format version to each phrase or other row
user table gets last sync
client table, clientId, email, lastSync indexed by email
history table indexed by email, timestamp, clientId, deleted, JSON for phrase, phrase has delete flag
clipboard table indexed by email, timestamp, clientId, JSON for entire clipboard
favorite table indexed by email, timestamp, clientId, JSON for entire favorites, each category and item has delete flag
settings table indexed by email, timestamp, clientId, JSON for history settings (only voice, history, account)
keep all old rows with timestamp > minimum client lastSync
therefore, delete all rows with timestamp <= minimum client lastSync

how to delete obsolete entries

compose and speak logic
  History: addToHistory
  export function addToHistory(obj) {
    obj = Object.assign({ timestamp: Date.now() }, obj);
    //Phrases, not History, indexed by timestamp
  	History.items.unshift(obj);//PendingPhrases, not History, indexed by timestamp
    updateLocalStorage();
  };


new ideas
  each new phrase saved forever, at least for now
  each phrase gets an int index auto increment
  each built in only saved once in database
  each revision of history, AddTextToClipboard, favorites has new phrases plus updated arrays with array of integers, which are phrase ids
  Change the data structures on the client to match the server
  Have server APIs that match client local storage options, such as addToHistory

types of data

history items ordered by timestamp - add, delete
clipboard, an array every time it is changed - update
favorites categories - update
favorites items within categories - update
settings - update

where to store it

with each utterance or other action,

server post with delta, create, delete or update
if create, server inserts into table, passes results to client with unique id's
client updates localStorage
but doesn't deal with multiple clients!!!

each client holds timestamp of last server sync And some sort of secondary indication about size
Server holds timestamp for each client with timestamp of last server sync
with each new session, server sends timestamps to client,
client sends timestamps and pending updates , server sends pending updates to cclient

potential problems

software bugs
network problems
server crashes
browser cache cleared

can't use software until complete
at start, server downloads summary data for that user
client sees if it has newer data, including deletions and updates, uploads it with its summary data
server updates db as needed, downloads new data (client&server) to client with summary
client acknowledges receipt

localStorage

history, last sync timestamp, deleted timestamp, entries after last server sync removed only by auto delete
client maintains an associative array of all deletions

AddTextToClipboard, full list with timestamp back to last server sync
favorites, full list, saved history back to last server sync
settings, same
need to figure out built in favorites!!!

server merge with client,
returns either full set of new data or deltas at start of browser session





======

/app when window.eyevocalizeUserEmail==''
Try it experience

Application always comes up with draggable popup in top middle that says:

Thanks for trying the EyeVocalize app.

drag bar with title, Quick tutorial, close icon on right
[Help topics] [Prev] [Next] [dblleft] left right dblright dblup up down  dbldown
* to say something, type text into the composition box at the top, then press Return or
click the Speak icon (show icon)
* to use one of the built-in MyPhrases, simply click on one and the computer will speak
* to add your own favorite, type text into the composition box and press the add favorite icon
(show icon)
* to prepare some text to Vocalize later type text into the composition box and click the
Add to Clipboard icon (show icon)
* to choose a different voice or change speaking speed, click the Settings icon (show icon)
You can close this help screen by pressing the X at the top right.
You can move this box by dragging the title bar or pressing one of the arrow icons.
To continue onto the next help topic, press Next.

The account icon is replaced by a Trial user / Signup now button

======

/
Landing page, full page

pictures of me using the eye gaze system in the background

logo on left, EyeVocalize.com To get started, go to [ Login ] [ Sign Up ] [ Try It ]

Welcome to EyeVocalize.com!

This website is a free, public version of a Web application that I wrote for myself
so that I can participate in conversations and communicate my needs
using only my eye, despite the fact that I have advanced ALS.

Only a few people will find this application useful. If you, like me, are:
* Paralyzed in your arms and hands
* Unable to talk
* Proficient in using [eye gaze technology], particularly the
[Tobii PC Eye Mini]

You run EyeVocalize in a browser tab,
which allows you to quickly switch between speech synthesis (using EyeVocalize)
other browser tabs (eg, web mail, search, calendar, chat, document authoring)
and other desktop applications (which for me is mostly programming tools).

EyeVocalize features:
* you can type text, then press Return (or click the speak icon) to cause the words to be spoken
using voice synthesis
* a built-in library of common expressions, such as yes, no,
thank you, toilet please, etc.
* you can define your own favorites for phrases that you use repeatedly
* you can prepare text in advance and
store on the Clipboard for one-click speaking at just the right time
* for fun, you can play Web audio clips or YouTube clips, such as
"Houston, we have a problem"

To explore, press the Try It button at the top of this window.
To sign up as a member of EyeVocalize.com, which unlocks
[cross-device syncing] and allows you to [contribute] to making the
application better, press the Sign Up button.

======

if not a session, take to login screen or sign up screen, depending on cookie

If you just want to explore the application, simply
Login
  email
  password

  forgot password

look on other computer
